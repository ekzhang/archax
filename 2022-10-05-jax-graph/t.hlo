HloModule xla_computation_dlfn.1, entry_computation_layout={(f32[256]{0})->(f32[256]{0})}

region_0.15 {
  Arg_0.16 = f32[] parameter(0)
  Arg_1.17 = f32[] parameter(1)
  ROOT add.18 = f32[] add(Arg_0.16, Arg_1.17)
}

ENTRY main.31 {
  constant.7 = f32[] constant(1)
  constant.4 = f32[] constant(1)
  broadcast.5 = f32[256]{0} broadcast(constant.4), dimensions={}
  Arg_0.1 = f32[256]{0} parameter(0)
  constant.2 = f32[] constant(-2)
  broadcast.3 = f32[256]{0} broadcast(constant.2), dimensions={}
  multiply.8 = f32[256]{0} multiply(Arg_0.1, broadcast.3)
  exponential.9 = f32[256]{0} exponential(multiply.8)
  subtract.10 = f32[256]{0} subtract(broadcast.5, exponential.9)
  add.11 = f32[256]{0} add(exponential.9, broadcast.5)
  divide.12 = f32[256]{0} divide(subtract.10, add.11)
  constant.6 = f32[] constant(0)
  reduce.19 = f32[] reduce(divide.12, constant.6), dimensions={0}, to_apply=region_0.15
  divide.20 = f32[] divide(constant.7, reduce.19)
  broadcast.21 = f32[256]{0} broadcast(divide.20), dimensions={}
  multiply.13 = f32[256]{0} multiply(add.11, add.11)
  divide.14 = f32[256]{0} divide(broadcast.5, multiply.13)
  multiply.22 = f32[256]{0} multiply(broadcast.21, divide.14)
  multiply.23 = f32[256]{0} multiply(multiply.22, subtract.10)
  negate.24 = f32[256]{0} negate(multiply.23)
  divide.25 = f32[256]{0} divide(broadcast.21, add.11)
  negate.26 = f32[256]{0} negate(divide.25)
  add.27 = f32[256]{0} add(negate.24, negate.26)
  multiply.28 = f32[256]{0} multiply(add.27, exponential.9)
  multiply.29 = f32[256]{0} multiply(multiply.28, broadcast.3)
  ROOT tuple.30 = (f32[256]{0}) tuple(multiply.29)
}

